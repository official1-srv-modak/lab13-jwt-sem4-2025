/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.souravmodak.lab13jwt;

import com.souravmodak.lab13jwt.model.Transaction;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-19T17:31:14.507162-04:00[America/Toronto]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "transactions", description = "the transactions API")
public interface TransactionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /transactions/all : Admin can view all transactions
     *
     * @return All transactions (status code 200)
     */
    @Operation(
        operationId = "transactionsAllGet",
        summary = "Admin can view all transactions",
        responses = {
            @ApiResponse(responseCode = "200", description = "All transactions", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/all",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Transaction>> transactionsAllGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"amount\" : 6.027456183070403, \"description\" : \"description\", \"id\" : 0, \"username\" : \"username\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"amount\" : 6.027456183070403, \"description\" : \"description\", \"id\" : 0, \"username\" : \"username\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions/me : Get own transactions
     *
     * @return Transaction list (status code 200)
     */
    @Operation(
        operationId = "transactionsMeGet",
        summary = "Get own transactions",
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction list", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/me",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Transaction>> transactionsMeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"amount\" : 6.027456183070403, \"description\" : \"description\", \"id\" : 0, \"username\" : \"username\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"amount\" : 6.027456183070403, \"description\" : \"description\", \"id\" : 0, \"username\" : \"username\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
